package cs601.project3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

import cs601.project3.amazonSearch.model.AmazonDocument;
import cs601.project3.amazonSearch.model.AmazonSearchUI;
import cs601.project3.amazonSearch.model.InvertedIndex;
import cs601.project3.amazonSearch.model.ListOfDocsWithFreqs;
import cs601.project3.amazonSearch.model.QADocument;
import cs601.project3.amazonSearch.model.ReviewDocument;
import cs601.project3.amazonSearch.tools.AmazonSearchFactory;
import cs601.project3.amazonSearch.tools.StringHelper;

/**
 * the class for reading amazon data files, and executing command including find, search, partial search,etc
 * @author yangzun
 *
 */
public class AmazonSearch {
	private static Logger logger = Logger.getLogger(AmazonSearch.class);
	static {
		PropertyConfigurator.configure("./config/log4j.properties");
	}
	
	private InvertedIndex<QADocument> qaDatabase;//question/answer Inverted Index database
	private InvertedIndex<ReviewDocument> reviewDatabase;//review Inverted Index database

	private static volatile boolean initated = false;
	
	private static AmazonSearch instance;
	
	static Thread t = new Thread() {
		@Override
		public synchronized void run() {
			if(initated) return;
			AmazonSearch.setSourceFile("qa.json","review.json");
			//initiate
			instance = AmazonSearchFactory.buildAmazonSearch(qaFileName, reviewFileName);
			logger.info("amazon search database initiated!");
			initated = true;
		}
	};
	
	public static AmazonSearch getInstance() {
		if(instance != null) return instance;
		//build search engine by initiating databases, if there is file name error, program exit
		t.start();
		return instance;
		
	}
	
	private static String qaFileName;
	private static String reviewFileName;

	public static void setSourceFile(String qaFile, String reviewFile){
		AmazonSearch.qaFileName = qaFile;
		AmazonSearch.reviewFileName = reviewFile;
	}


	public String getSearchResults(String term) {
		//		Iterator<String> displayIter = AmazonSearchUI.showFindResults(find(param,qaDatabase), find(param,reviewDatabase));
		Iterator<String> displayIter = AmazonSearchUI.showSearchResults(term, search(term, reviewDatabase));
		return lesss(displayIter, 5);
	}
	
	
	public String getFindResults(String term) {
		Iterator<String> displayIter = AmazonSearchUI.showFindResults(find(term,qaDatabase), find(term,reviewDatabase));
		return lesss(displayIter, 5);
	}
	/**
	 * show by page the contents generated by a string iterator
	 * @param sc
	 * @param iter
	 */
	public static String lesss(Iterator<String> iter, int linesPerPage){
		StringBuffer sb = new StringBuffer();
		int count = 0;
		while(iter.hasNext()){
			if(count > 0 && count % linesPerPage == 0) {
				return sb.toString();
			}
			String line = iter.next();
			sb.append(line).append("\n");
			count++;
		}
		return sb.toString();
	}

	/**
	 * in a review or QA inverted index database, find all the document associated with a certain asin
	 * @param asin the product asin
	 * @param database inverted index database
	 * @return
	 */
	public <T extends AmazonDocument> List<T> find(String asin, InvertedIndex<T> database) {
		return database.findDocumentsByAsin(asin);
	}

	/**
	 * search in a review or QA inverted index database the documents associated with the exact term, case insensitively.
	 * @param term the exact term for searching
	 * @param database inverted index database
	 * @return associated documents and its frequencies
	 */
	public <T extends AmazonDocument> ListOfDocsWithFreqs<T> search(String term, InvertedIndex<T> database) {
		return database.getSortedListOfDocsWithFreqsByTerm(term);
	}

	/**
	 * search the partial matches of term in the inverted index database
	 * @param term the term used for partial search
	 * @param database inverted index database
	 * @return token-associated documents map
	 */
	public <T extends AmazonDocument> Map<String, ListOfDocsWithFreqs<T>> partialsearch(String term, InvertedIndex<T> database) {
		Map<String, ListOfDocsWithFreqs<T>> searchResult = new LinkedHashMap<>(); 
		term = term.toLowerCase();
		List<String> tokens = StringHelper.partialMatchTokens(term, database.getAllTokens());
		for (String token : tokens) {
			searchResult.put(token, search(token,database));
		}
		return searchResult;
	}

	public InvertedIndex<QADocument> getQaDatabase() {
		return qaDatabase;
	}

	public InvertedIndex<ReviewDocument> getReviewDatabase() {
		return reviewDatabase;
	}

	public void setQaDatabase(InvertedIndex<QADocument> qaDatabase) {
		this.qaDatabase = qaDatabase;
	}

	public void setReviewDatabase(InvertedIndex<ReviewDocument> reviewDatabase) {
		this.reviewDatabase = reviewDatabase;
	}
}
