package cs601.project3.amazonSearch.model;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Scanner;


public class AmazonSearchUI {
	public static int LINES_PER_PAGE = 5;//how many lines are shown per page when display excessive lines.
	public static List<String> COMMANDS_PROMPT;//commands format description
	static {
		COMMANDS_PROMPT = new ArrayList<>();
		COMMANDS_PROMPT.add("find <asin>");
		COMMANDS_PROMPT.add("reviewsearch <term>");
		COMMANDS_PROMPT.add("qasearch <term>");
		COMMANDS_PROMPT.add("reviewpartialsearch <term>");
		COMMANDS_PROMPT.add("qapartialsearch <term>");
		COMMANDS_PROMPT.add("setpage <integer>");
		COMMANDS_PROMPT.add("input \"exit\" to exit the program");
	}
	
	/**
	 * customize a list of strings according to command prompt format
	 * @param strs
	 * @return
	 */
	public static String generatePrompt(List<String> strs) {
		StringBuffer sb = new StringBuffer(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n");
		for (String s : strs) {
			sb.append("\t\t").append(s).append("\n");
		}
		sb.append(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n:");
		return sb.toString();
	}
	
	/**
	 * display command prompt UI
	 */
	public static void displayCmdPrompt() {
		System.out.print(generatePrompt(COMMANDS_PROMPT));
	}
	
	/**
	 * display command prompt UI with an error reminder
	 */
	public static void displayCmdPromptWithErrorReminder() {
		COMMANDS_PROMPT.add(0, "COMMAND FORMAT ERROR! ");
		displayCmdPrompt();
		COMMANDS_PROMPT.remove(0);
	}
	
	/**
	 * show by page the contents generated by a string iterator
	 * @param sc
	 * @param iter
	 */
	public static void less(Scanner sc, Iterator<String> iter){
		boolean paging = true;
		int count = 0;
		while(iter.hasNext()){
			if(paging && count > 0 && count % LINES_PER_PAGE == 0) {
				System.out.println("<<<<<press \"q\" to exit display, \"e\" to go to the end, press other key to continue<<<<<<<");
				String lessPrompt = sc.nextLine();
				if(lessPrompt.equals("q")) {
					break;
				}else if (lessPrompt.equals("e")){
					paging = false;
				}
			}
			String line = iter.next();
			System.out.println(line);
			count++;
		}
	}
	
	/**
	 * designed for amazonSearch class, show results generated by find command
	 * @param qas
	 * @param rvs
	 * @return
	 */
	public static Iterator<String> showFindResults(List<QADocument> qas, List<ReviewDocument> rvs){
		if((qas.size() == 0) && rvs.size() == 0){
			return iteratorForAListOfOneString("no results found on this asin.");
		}
		Iterator<QADocument> qaIter = qas.iterator();
		Iterator<ReviewDocument> reviewIter = rvs.iterator();
		return new Iterator<String>() {
			boolean qaTitleShown = false;
			boolean reviewTitleShown = false;
			@Override
			public boolean hasNext() {
				if(!qaTitleShown) return true;
				if(!reviewTitleShown) return true;
				return qaIter.hasNext() || reviewIter.hasNext();
			}
			@Override
			public String next() {
				if(!qaTitleShown){
					qaTitleShown = true;
					return "=============" + qas.size() + " question/answer results for designated asin ===============";
				}else if(qaIter.hasNext()){
					return showSummary(qaIter.next().summary());
				}else if(!reviewTitleShown){
					reviewTitleShown = true;
					return "=============" + rvs.size() + " review results for designated asin ===============";
				}else{
					return showSummary(reviewIter.next().summary());
				}
			}
		};
	}
	
	/**
	 * designed for amazonSearch class, show results generated by search command
	 * @param token
	 * @param docFreqMap
	 * @return
	 */
	public static <T extends AmazonDocument> Iterator<String> showSearchResults(String token, ListOfDocsWithFreqs<T> docs) {
		if(docs == null) {
			return iteratorForAListOfOneString("no results found on keyword: " + token);
		}
		Iterator<ListOfDocsWithFreqs<T>.DocWithFreq> iter = docs.getIterator();
		Iterator<String> searchResultsIter = new Iterator<String>() {
			boolean titleShown = false;
			@Override
			public boolean hasNext() {
				return !titleShown || iter.hasNext();
			}
			@Override
			public String next() {
				if(!titleShown) {
					titleShown = true;
					return "found " + docs.size() + " document(s)";
				}
				ListOfDocsWithFreqs<T>.DocWithFreq docWithFreq = iter.next();
				return "\"" + token + "\" appeared " + docWithFreq.getFreq() + " times in:\n" + showSummary(docWithFreq.getDoc().summary());
			}
		};
		return searchResultsIter;
	}
	
	/**
	 * designed for amazonSearch class, show results generated by partial search command
	 * @param results
	 * @return
	 */
	public static <T extends AmazonDocument> Iterator<String> showPartialSearchResults(Map<String, ListOfDocsWithFreqs<T>> results) {
		if(results == null || results.size() == 0){
			return iteratorForAListOfOneString("no partial-matched results found on this term.");
		}
		Iterator<String> tokenIter = results.keySet().iterator();
		Iterator<String> partialSearchResultsIter = new Iterator<String>() {
			Iterator<String> searchResultsIter = new ArrayList<String>().iterator();
			@Override
			public boolean hasNext() {
				if(searchResultsIter.hasNext()) {
					return true;
				}else{
					return tokenIter.hasNext();
				}
			}
			@Override
			public String next() {
				if(searchResultsIter.hasNext()) {
					return searchResultsIter.next();
				}else{
					String token = tokenIter.next();
					String divisionTitle = "=============results for matched keyword: " + token + "===============\n";
					ListOfDocsWithFreqs<T> listOfDocsWithFreqs = results.get(token);
					searchResultsIter = showSearchResults(token, listOfDocsWithFreqs);
					return divisionTitle;
				}
			}
		};
		return partialSearchResultsIter;
	}
	
	/**
	 * show summary of a document
	 * @param list
	 * @return
	 */
	public static String showSummary(List<String> list) {
		StringBuffer sb = new StringBuffer();
		for (String s : list) {
			sb.append("  " + s + "\n");
		}
		return sb.toString();
	}
	
	/**
	 * set LINES_PER_PAGE
	 * @param param
	 * @return a iterator of a list of one string, which is the status of operation
	 */
	public static Iterator<String> setLinesPerPage(String number) {
		try {
			LINES_PER_PAGE = new Integer(number);
			return AmazonSearchUI.iteratorForAListOfOneString("LINES_PER_PAGE is set to " + LINES_PER_PAGE + " now!");
		}catch(NumberFormatException e){
			return null;
		}
	}
	/**
	 * generate an iterator for a list of only one string 
	 * @param term
	 * @return
	 */
	public static Iterator<String> iteratorForAListOfOneString(String term) {
		List<String> list = new ArrayList<>();
		list.add(term);
		return list.iterator();
	}
}
